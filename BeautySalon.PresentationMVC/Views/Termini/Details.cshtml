@* BeautySalon.PresentationMVC\Views\Termini\Details.cshtml *@

@model BeautySalon.PresentationMVC.ViewModels.TerminViewModel

@{
    ViewData["Title"] = Model.Id == 0 ? "Kreiraj termin" : "Detalji termina";
}

<div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-md">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">@ViewData["Title"]</h1>

    <form asp-action="@(Model.Id == 0 ? "Create" : "Edit")" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <label asp-for="Datum" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="Datum" type="date" class="mt-1 block w-full input-field" />
                <span asp-validation-for="Datum" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="Vrijeme" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="Vrijeme" type="time" class="mt-1 block w-full input-field" />
                <span asp-validation-for="Vrijeme" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="TrajanjeMinuta" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="TrajanjeMinuta" type="number" class="mt-1 block w-full input-field" />
                <span asp-validation-for="TrajanjeMinuta" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="Status" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="Status" asp-items="Model.StatusiTermina" class="mt-1 block w-full input-field"></select>
                <span asp-validation-for="Status" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="KlijentId" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="KlijentId" asp-items="Model.Klijenti" class="mt-1 block w-full input-field">
                    <option value="">-- Odaberite klijenta --</option>
                </select>
                <span asp-validation-for="KlijentId" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="ZaposlenikId" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="ZaposlenikId" asp-items="Model.Zaposlenici" class="mt-1 block w-full input-field">
                    <option value="">-- Odaberite zaposlenika --</option>
                </select>
                <span asp-validation-for="ZaposlenikId" class="validation-message"></span>
            </div>
        </div>

        <h2 class="text-xl font-semibold text-gray-800 mb-4">Stavke termina</h2>
        <div id="stavkeTerminaContainer">
            @for (int i = 0; i < Model.StavkeTermina.Count; i++)
            {
                @Html.Partial("_StavkaTerminaPartial", Model.StavkeTermina[i], new ViewDataDictionary(ViewData) { { "Index", i }, { "Usluge", Model.Usluge } })
            }
        </div>

        <button type="button" id="addStavkaBtn" class="btn btn-secondary mb-6">Dodaj stavku</button>

        <div class="text-right text-lg font-bold text-gray-800 mb-6">
            Ukupna cijena: <span id="ukupnaCijenaDisplay">@Model.UkupnaCijena.ToString("C")</span>
        </div>

        <div class="flex justify-end space-x-3">
            <a asp-action="Index" class="btn btn-secondary">Natrag na popis</a>
            <button type="submit" class="btn btn-primary">Spremi</button>
            @if (Model.Id != 0)
            {
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post" class="inline" onsubmit="return confirm('Jeste li sigurni da želite obrisati ovaj termin?');">
                    <button type="submit" class="btn btn-danger">Obriši</button>
                </form>
            }
        </div>

        <div asp-validation-summary="All" class="validation-message mt-4"></div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Inicijalni indeks za nove stavke. Ovo će se koristiti kao početna točka za nove ID-jeve.
        let stavkaCounter = @(Model.StavkeTermina?.Count ?? 0);

        // Funkcija za reindeksiranje svih input polja unutar kontejnera stavki.
        // Ovo je KLJUČNO za ispravno slanje forme na server nakon dodavanja/brisanja/odustajanja.
        function reindexStavke() {
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach((item, index) => {
                // Preskoči stavke koje su označene kao obrisane (ali su još u DOM-u)
                const isDeletedInput = item.querySelector('.is-deleted-field');
                if (isDeletedInput && isDeletedInput.value === 'true') {
                    // Ostavljamo ih s njihovim originalnim imenima da se mogu poslati na server kao "obrisane"
                    return;
                }

                const prefix = `StavkeTermina[${index}]`;
                item.querySelectorAll('[name]').forEach(element => {
                    const oldName = element.getAttribute('name');
                    if (oldName) {
                        // Regularni izraz za zamjenu postojećeg indeksa (npr. [0], [1], [n]) s novim indexom
                        const newName = oldName.replace(/StavkeTermina\[\d+\]/, prefix);
                        element.setAttribute('name', newName);
                        // Ažuriraj i 'id' atribut za klijentsku validaciju
                        if (element.id) {
                            element.id = newName.replace(/[\.\[\]]/g, '_');
                        }
                    }
                });
                // Ažuriraj 'for' atribute za labele
                item.querySelectorAll('label[for]').forEach(label => {
                    const oldFor = label.getAttribute('for');
                    if (oldFor) {
                        const newFor = oldFor.replace(/StavkeTermina_\d+__/, `StavkeTermina_${index}__`);
                        label.setAttribute('for', newFor);
                    }
                });
            });
        }

        // Funkcija za dohvaćanje cijene usluge s backend-a
        async function getUslugaPrice(uslugaId) {
            if (!uslugaId) return 0.00;
            try {
                const response = await fetch(`/Usluge/GetUslugaPrice?id=${uslugaId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data.cijena;
            } catch (error) {
                console.error('Greška pri dohvaćanju cijene usluge:', error);
                return 0.00;
            }
        }

        // Funkcija za ažuriranje ukupne cijene
        function updateTotalCijena() {
            let total = 0;
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach(stavkaDiv => {
                const isDeletedInput = stavkaDiv.querySelector('.is-deleted-field');
                // Samo zbroji cijene stavki koje NISU označene kao obrisane
                if (isDeletedInput && isDeletedInput.value === 'true') {
                    return;
                }

                const cijenaInput = stavkaDiv.querySelector('.cijena-input');
                const kolicinaInput = stavkaDiv.querySelector('.kolicina-input');

                const cijena = parseFloat(cijenaInput?.value || 0);
                const kolicina = parseInt(kolicinaInput?.value || 0);

                total += (cijena * kolicina);
            });
            document.getElementById('ukupnaCijenaDisplay').innerText = total.toLocaleString('hr-HR', { style: 'currency', currency: 'HRK' });
        }

        // Funkcija za prebacivanje između prikaza i uređivanja stavke
        function toggleStavkaMode(stavkaItem, isEditMode) {
            const displayModeDiv = stavkaItem.querySelector('.display-mode');
            const editModeDiv = stavkaItem.querySelector('.edit-mode');
            const uslugaSelect = stavkaItem.querySelector('.usluga-select');
            const uslugaNazivHidden = stavkaItem.querySelector('.usluga-naziv-hidden');
            const uslugaIdHidden = stavkaItem.querySelector('.usluga-id-hidden');
            const displayUslugaNazivP = stavkaItem.querySelector('[data-usluga-naziv]');

            if (isEditMode) {
                displayModeDiv.classList.add('hidden');
                editModeDiv.classList.remove('hidden');
                // Postavi vrijednost selecta na temelju skrivenog polja
                if (uslugaSelect && uslugaIdHidden && uslugaIdHidden.value) {
                    uslugaSelect.value = uslugaIdHidden.value;
                }
            } else { // Odustani od uređivanja (za postojeće stavke) ili ukloni novu stavku
                if (stavkaItem.dataset.isNew === 'true') {
                    // Ako je nova stavka, ukloni je prilikom odustajanja
                    stavkaItem.remove();
                    reindexStavke(); // Reindeksiraj jer je element uklonjen
                } else {
                    // Za postojeće stavke, vrati na display mode i originalne vrijednosti
                    displayModeDiv.classList.remove('hidden');
                    editModeDiv.classList.add('hidden');
                    if (displayUslugaNazivP && uslugaNazivHidden) {
                        displayUslugaNazivP.innerText = uslugaNazivHidden.value;
                    }
                    if (uslugaSelect && uslugaIdHidden) {
                        uslugaSelect.value = uslugaIdHidden.value;
                    }
                }
            }
            updateTotalCijena();
        }

        // Funkcija za attachanje event listenera na Select i Quantity za pojedinu stavku
        function attachStavkaEventListeners(stavkaElement) {
            const uslugaSelect = stavkaElement.querySelector('.usluga-select');
            const kolicinaInput = stavkaElement.querySelector('.kolicina-input');
            const cijenaInput = stavkaElement.querySelector('.cijena-input');
            const uslugaNazivHidden = stavkaElement.querySelector('.usluga-naziv-hidden');
            const uslugaIdHidden = stavkaElement.querySelector('.usluga-id-hidden');
            const displayUslugaNazivP = stavkaElement.querySelector('[data-usluga-naziv]');
            const isDeletedInput = stavkaElement.querySelector('.is-deleted-field');

            // Inicijalno postavljanje selecta za postojeće stavke (koje se renderiraju na serveru)
            if (stavkaElement.dataset.isNew !== 'true' && uslugaSelect && uslugaIdHidden && uslugaIdHidden.value) {
                uslugaSelect.value = uslugaIdHidden.value;
            }

            // Ako je stavka inicijalno označena kao obrisana (npr. nakon neuspjelog spremanja forme), sakrij je
            if (isDeletedInput && isDeletedInput.value === 'true') {
                stavkaElement.classList.add('hidden');
            }


            if (uslugaSelect) {
                uslugaSelect.addEventListener('change', async function () {
                    const uslugaId = this.value;
                    const selectedUslugaText = this.options[this.selectedIndex].text;
                    const kolicina = parseInt(kolicinaInput.value || 1);

                    if (uslugaId) {
                        const cijenaPoKomadu = await getUslugaPrice(uslugaId);
                        cijenaInput.value = (cijenaPoKomadu * kolicina).toFixed(2);
                        if (displayUslugaNazivP) displayUslugaNazivP.innerText = selectedUslugaText;
                        if (uslugaNazivHidden) uslugaNazivHidden.value = selectedUslugaText;
                        if (uslugaIdHidden) uslugaIdHidden.value = uslugaId;
                    } else {
                        cijenaInput.value = '0.00';
                        if (displayUslugaNazivP) displayUslugaNazivP.innerText = '';
                        if (uslugaNazivHidden) uslugaNazivHidden.value = '';
                        if (uslugaIdHidden) uslugaIdHidden.value = '0';
                    }
                    updateTotalCijena();
                });
            }

            if (kolicinaInput) {
                kolicinaInput.addEventListener('input', async function () {
                    const kolicina = parseInt(this.value || 0);
                    // Dohvati uslugaId iz skrivenog polja (za postojeće) ili iz selecta (za nove)
                    const uslugaId = uslugaIdHidden ? uslugaIdHidden.value : uslugaSelect?.value;

                    if (uslugaId) {
                        const cijenaPoKomadu = await getUslugaPrice(uslugaId);
                        cijenaInput.value = (cijenaPoKomadu * kolicina).toFixed(2);
                    } else {
                        cijenaInput.value = '0.00';
                    }
                    updateTotalCijena();
                });
            }

            // Ako je nova stavka (data-is-new='true'), odmah je prebaci u edit mode
            if (stavkaElement.dataset.isNew === 'true') {
                toggleStavkaMode(stavkaElement, true);
            }
        }

        // Kada se stranica učita
        document.addEventListener('DOMContentLoaded', function () {
            const stavkeContainer = document.getElementById('stavkeTerminaContainer');

            // Prije nego što se attachaju listeneri, provjeri i sakrij postojeće "obrisane" stavke
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach(stavkaItem => {
                const isDeletedInput = stavkaItem.querySelector('.is-deleted-field');
                if (isDeletedInput && isDeletedInput.value === 'true') {
                    stavkaItem.classList.add('hidden');
                }
            });

            // Reindeksiraj sve stavke na učitavanje stranice
            reindexStavke();

            // Attach event listeners for all existing stavke on page load
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach(attachStavkaEventListeners);

            // Event listener za dodavanje nove stavke
            document.getElementById('addStavkaBtn').addEventListener('click', function () {
                fetch(`@Url.Action("GetNewStavkaTerminaPartial", "Termini")?index=${stavkaCounter}`)
                    .then(response => response.text())
                    .then(html => {
                        const newStavkaElementWrapper = document.createElement('div');
                        newStavkaElementWrapper.innerHTML = html.trim();
                        const newStavkaElement = newStavkaElementWrapper.firstElementChild;
                        stavkeContainer.appendChild(newStavkaElement);

                        // Povećaj brojač za sljedeću stavku
                        stavkaCounter++;

                        // Važno: Reindeksiraj sve stavke NAKON dodavanja nove stavke
                        // Ovo osigurava da novi elementi imaju ispravne indekse za slanje na server
                        reindexStavke();

                        // Potrebno za klijentsku validaciju novih elemenata
                        $.validator.unobtrusive.parse(newStavkaElement);

                        attachStavkaEventListeners(newStavkaElement); // Pridruži event listenere novoj stavci
                        updateTotalCijena(); // Ažuriraj ukupnu cijenu
                    })
                    .catch(error => console.error('Greška pri dodavanju nove stavke:', error));
            });

            // Delegacija događaja za gumbe unutar stavki termina
            stavkeContainer.addEventListener('click', function (e) {
                const stavkaItem = e.target.closest('.stavka-termina-item');
                if (!stavkaItem) return;

                // Gumb za uklanjanje stavke (logičko brisanje)
                if (e.target.closest('.remove-stavka-btn')) {
                    const isDeletedInput = stavkaItem.querySelector('.is-deleted-field');
                    if (isDeletedInput) {
                        isDeletedInput.value = 'true'; // Označi za brisanje
                    }
                    stavkaItem.classList.add('hidden'); // Sakrij stavku
                    updateTotalCijena(); // Ažuriraj ukupnu cijenu
                    // Ovdje NE reindeksiramo, jer obrisani element ostaje u DOM-u s originalnim indeksom
                }
                // Gumb za uređivanje stavke
                else if (e.target.closest('.edit-stavka-btn')) {
                    toggleStavkaMode(stavkaItem, true);
                }
                // Gumb za odustajanje od uređivanja/dodavanja stavke
                else if (e.target.closest('.cancel-stavka-btn')) {
                    toggleStavkaMode(stavkaItem, false);
                    // Ako je toggleStavkaMode uklonio element (za nove stavke), reindeksiraj
                    // Nema potrebe pozivati reindexStavke() ako element nije uklonjen (za postojeće)
                    if (!stavkaItem.parentNode) { // Provjeri je li element uklonjen iz DOM-a
                        reindexStavke();
                    }
                }
            });

            // Initial total calculation on page load
            updateTotalCijena();
        });
    </script>
}