@* BeautySalon.PresentationMVC\Views\Termini\Details.cshtml *@

@model BeautySalon.PresentationMVC.ViewModels.TerminViewModel

@{
    ViewData["Title"] = Model.Id == 0 ? "Kreiraj termin" : "Detalji termina";
}

<div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-md">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">@ViewData["Title"]</h1>

    <form asp-action="@(Model.Id == 0 ? "Create" : "Edit")" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <label asp-for="Datum" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="Datum" type="date" class="mt-1 block w-full input-field" />
                <span asp-validation-for="Datum" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="Vrijeme" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="Vrijeme" type="time" class="mt-1 block w-full input-field" />
                <span asp-validation-for="Vrijeme" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="TrajanjeMinuta" class="block text-sm font-medium text-gray-700"></label>
                <input asp-for="TrajanjeMinuta" type="number" class="mt-1 block w-full input-field" />
                <span asp-validation-for="TrajanjeMinuta" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="Status" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="Status" asp-items="Model.StatusiTermina" class="mt-1 block w-full input-field"></select>
                <span asp-validation-for="Status" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="KlijentId" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="KlijentId" asp-items="Model.Klijenti" class="mt-1 block w-full input-field">
                    <option value="">-- Odaberite klijenta --</option>
                </select>
                <span asp-validation-for="KlijentId" class="validation-message"></span>
            </div>
            <div>
                <label asp-for="ZaposlenikId" class="block text-sm font-medium text-gray-700"></label>
                <select asp-for="ZaposlenikId" asp-items="Model.Zaposlenici" class="mt-1 block w-full input-field">
                    <option value="">-- Odaberite zaposlenika --</option>
                </select>
                <span asp-validation-for="ZaposlenikId" class="validation-message"></span>
            </div>
        </div>

        <h2 class="text-xl font-semibold text-gray-800 mb-4">Stavke termina</h2>
        <div id="stavkeTerminaContainer">
            @for (int i = 0; i < Model.StavkeTermina.Count; i++)
            {
                @* PROMJENA OVDJE: Proslijedi Usluge iz glavnog Modela u partial view *@
                @Html.Partial("_StavkaTerminaPartial", Model.StavkeTermina[i], new ViewDataDictionary(ViewData) { { "Index", i }, { "Usluge", Model.Usluge } })
            }
        </div>

        <button type="button" id="addStavkaBtn" class="btn btn-secondary mb-6">Dodaj stavku</button>

        <div class="text-right text-lg font-bold text-gray-800 mb-6">
            Ukupna cijena: <span id="ukupnaCijenaDisplay">@Model.UkupnaCijena.ToString("C")</span>
        </div>

        <div class="flex justify-end space-x-3">
            <a asp-action="Index" class="btn btn-secondary">Natrag na popis</a>
            <button type="submit" class="btn btn-primary">Spremi</button>
            @if (Model.Id != 0)
            {
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post" class="inline" onsubmit="return confirm('Jeste li sigurni da želite obrisati ovaj termin?');">
                    <button type="submit" class="btn btn-danger">Obriši</button>
                </form>
            }
        </div>

        <div asp-validation-summary="All" class="validation-message mt-4"></div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Postavi početni indeks za nove stavke
        let stavkaIndex = @(Model.StavkeTermina?.Count ?? 0);

        // Funkcija za dohvaćanje cijene usluge s backend-a
        async function getUslugaPrice(uslugaId) {
            try {
                // Pazite da imate UslugeController s ovom akcijom
                const response = await fetch(`/Usluge/GetUslugaPrice?id=${uslugaId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data.cijena;
            } catch (error) {
                console.error('Greška pri dohvaćanju cijene usluge:', error);
                return 0.00; // Vrati 0 u slučaju greške
            }
        }

        // Funkcija za ažuriranje ukupne cijene
        function updateTotalCijena() {
            let total = 0;
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach(stavkaDiv => {
                const cijenaInput = stavkaDiv.querySelector('input[name$=".Cijena"]');
                const kolicinaInput = stavkaDiv.querySelector('input[name$=".Kolicina"]');

                const cijena = parseFloat(cijenaInput?.value || 0);
                const kolicina = parseInt(kolicinaInput?.value || 0);

                total += (cijena * kolicina);
            });
            // Formatiraj valutu prema lokalnim postavkama (npr. HRK)
            document.getElementById('ukupnaCijenaDisplay').innerText = total.toLocaleString('hr-HR', { style: 'currency', currency: 'HRK' });
        }

        // Funkcija za prebacivanje između prikaza i uređivanja stavke
        function toggleStavkaMode(stavkaItem, isEditMode) {
            const displayModeDiv = stavkaItem.querySelector('.display-mode');
            const editModeDiv = stavkaItem.querySelector('.edit-mode');
            const uslugaSelect = stavkaItem.querySelector('select[name$=".UslugaId"]');
            const hiddenUslugaNaziv = stavkaItem.querySelector('input[name$=".UslugaNaziv"]');
            const hiddenUslugaId = stavkaItem.querySelector('input[name$=".UslugaId"][type="hidden"]');
            const displayUslugaNazivP = stavkaItem.querySelector('[data-usluga-naziv]');

            if (isEditMode) {
                displayModeDiv.classList.add('hidden');
                editModeDiv.classList.remove('hidden');
                if (uslugaSelect && hiddenUslugaId && hiddenUslugaId.value) {
                    uslugaSelect.value = hiddenUslugaId.value;
                }
            } else {
                if (stavkaItem.dataset.isNew === 'true') { // Ako je nova stavka, ukloni je prilikom odustajanja
                    stavkaItem.remove();
                } else {
                    displayModeDiv.classList.remove('hidden');
                    editModeDiv.classList.add('hidden');
                    if (displayUslugaNazivP && hiddenUslugaNaziv) {
                        displayUslugaNazivP.innerText = hiddenUslugaNaziv.value;
                    }
                    if (uslugaSelect && hiddenUslugaId) {
                        uslugaSelect.value = hiddenUslugaId.value;
                    }
                }
            }
            updateTotalCijena();
        }

        // Funkcija za attachanje event listenera na Select i Quantity za pojedinu stavku
        function attachStavkaEventListeners(stavkaElement) {
            const uslugaSelect = stavkaElement.querySelector('select[name$=".UslugaId"]');
            const kolicinaInput = stavkaElement.querySelector('input[name$=".Kolicina"]');
            const cijenaInput = stavkaElement.querySelector('input[name$=".Cijena"]');
            const hiddenUslugaNaziv = stavkaElement.querySelector('input[name$=".UslugaNaziv"]');
            const hiddenUslugaIdInput = stavkaElement.querySelector('input[name$=".UslugaId"][type="hidden"]');
            const displayUslugaNazivP = stavkaElement.querySelector('[data-usluga-naziv]');

            if (uslugaSelect) {
                uslugaSelect.addEventListener('change', async function () {
                    const uslugaId = this.value;
                    const selectedUslugaText = this.options[this.selectedIndex].text;

                    if (uslugaId) {
                        const cijena = await getUslugaPrice(uslugaId);
                        cijenaInput.value = (cijena * (parseInt(kolicinaInput.value) || 1)).toFixed(2);
                        if (displayUslugaNazivP) displayUslugaNazivP.innerText = selectedUslugaText;
                        if (hiddenUslugaNaziv) hiddenUslugaNaziv.value = selectedUslugaText;
                        if (hiddenUslugaIdInput) hiddenUslugaIdInput.value = uslugaId;
                    } else {
                        cijenaInput.value = '0.00';
                        if (displayUslugaNazivP) displayUslugaNazivP.innerText = '';
                        if (hiddenUslugaNaziv) hiddenUslugaNaziv.value = '';
                        if (hiddenUslugaIdInput) hiddenUslugaIdInput.value = '0';
                    }
                    updateTotalCijena();
                });
            }

            if (kolicinaInput) {
                kolicinaInput.addEventListener('input', async function () {
                    const kolicina = parseInt(this.value || 0);
                    const uslugaId = uslugaSelect ? uslugaSelect.value : (hiddenUslugaIdInput ? hiddenUslugaIdInput.value : null);

                    if (uslugaId) {
                        const cijenaPoKomadu = await getUslugaPrice(uslugaId);
                        cijenaInput.value = (cijenaPoKomadu * kolicina).toFixed(2);
                    } else {
                        cijenaInput.value = '0.00';
                    }
                    updateTotalCijena();
                });
            }

            // Ako je nova stavka (Id == 0), prikaži je odmah u edit modu
            if (stavkaElement.dataset.isNew === 'true') {
                toggleStavkaMode(stavkaElement, true);
            }
        }

        // Kada se stranica učita
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('addStavkaBtn').addEventListener('click', function () {
                const container = document.getElementById('stavkeTerminaContainer');
                fetch(`@Url.Action("GetNewStavkaTerminaPartial", "Termini")?index=${stavkaIndex}`)
                    .then(response => response.text())
                    .then(html => {
                        const newStavkaElementWrapper = document.createElement('div');
                        newStavkaElementWrapper.innerHTML = html.trim();
                        const newStavkaElement = newStavkaElementWrapper.firstElementChild;
                        container.appendChild(newStavkaElement);

                        const form = document.querySelector('form');
                        $.validator.unobtrusive.parse(newStavkaElement);

                        attachStavkaEventListeners(newStavkaElement);

                        stavkaIndex++;
                        updateTotalCijena();
                    })
                    .catch(error => console.error('Greška pri dodavanju nove stavke:', error));
            });

            document.getElementById('stavkeTerminaContainer').addEventListener('click', function (e) {
                if (e.target.closest('.remove-stavka-btn')) {
                    e.target.closest('.stavka-termina-item').remove();
                    updateTotalCijena();
                }
                if (e.target.closest('.edit-stavka-btn')) {
                    const stavkaItem = e.target.closest('.stavka-termina-item');
                    toggleStavkaMode(stavkaItem, true);
                }
                if (e.target.closest('.cancel-stavka-btn')) {
                    const stavkaItem = e.target.closest('.stavka-termina-item');
                    toggleStavkaMode(stavkaItem, false);
                }
            });

            // Attach event listeners for existing stavke on page load
            document.querySelectorAll('#stavkeTerminaContainer .stavka-termina-item').forEach(attachStavkaEventListeners);

            // Initial total calculation on page load
            updateTotalCijena();
        });
    </script>
}